<?xml version="1.0" encoding="UTF-8"?>
<beans default-init-method="" default-destroy-method=""
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<value>classpath:proxool.properties</value>
		</property>
	</bean>
	
	<!-- @Value("#{detailTableProperties.itemType}")  -->
	<util:properties id="detailTableProperties" location="classpath:detailTable.properties"/>
	
	<!-- 测试配置多个配置文件 -->
	<bean
		class="main.spring.config.PropertyConfigure" id="config">
		<property name="locations">
			<list>
				<value>classpath:detailTable.properties</value>
				<value>classpath:email.properties</value>
			</list>
		</property>
	</bean>

	<!-- 无论是继承JdbcDAOSupport还是注入一个JDBCImplement 都需要一个BasicDataSource一个连接池 -->
	<bean id="zw6"
		class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
	    <property name="driverClassName" value="${jdbc.driver}" />
	    <property name="url" value="${jdbc.driverUrlzw6}" /> 
	    <property name="username" value="${proxool.user}"></property>
        <property name="password" value="${proxool.password}" />
        <property name="filters"  value="${db.filters}"></property>
        <property name="maxActive" value="${db.pool.maxActive}"></property>
        <property name="initialSize" value="${db.pool.initialSize}"></property>
        <property name="minIdle" value="${db.pool.minIdle}"></property>
        <property name="maxWait" value="${db.maxWait}"></property>    
        <property name="timeBetweenEvictionRunsMillis" value="${db.timeBetweenEvictionRunsMillis}"></property>
        <property name="minEvictableIdleTimeMillis" value="${db.minEvictableIdleTimeMillis}"></property>
        <property name="validationQuery" value="${db.validationQuery}"></property>
        <property name="testWhileIdle" value="${db.testWhileIdle}"></property>
        <property name="testOnBorrow" value="${db.testOnBorrow}"></property>
        <property name="testOnReturn" value="${db.testOnReturn}"></property>
        <property name="poolPreparedStatements" value="${db.poolPreparedStatements}"></property>
        <property name="maxOpenPreparedStatements" value="${db.maxOpenPreparedStatements}"></property>
	</bean>

	<!-- 第二个数据库配置一 -->
	<bean id="zw3"
		class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.driverUrlzw3}" /> 
		<property name="username" value="${proxool.user}"></property>
        <property name="password" value="${proxool.password}" />
        <property name="filters"  value="${db.filters}"></property>
        <property name="maxActive" value="${db.pool.maxActive}"></property>
        <property name="initialSize" value="${db.pool.initialSize}"></property>
        <property name="minIdle" value="${db.pool.minIdle}"></property>
        <property name="maxWait" value="${db.maxWait}"></property>    
        <property name="timeBetweenEvictionRunsMillis" value="${db.timeBetweenEvictionRunsMillis}"></property>
        <property name="minEvictableIdleTimeMillis" value="${db.minEvictableIdleTimeMillis}"></property>
        <property name="validationQuery" value="${db.validationQuery}"></property>
        <property name="testWhileIdle" value="${db.testWhileIdle}"></property>
        <property name="testOnBorrow" value="${db.testOnBorrow}"></property>
        <property name="testOnReturn" value="${db.testOnReturn}"></property>
        <property name="poolPreparedStatements" value="${db.poolPreparedStatements}"></property>
        <property name="maxOpenPreparedStatements" value="${db.maxOpenPreparedStatements}"></property>
	</bean>

	<!-- 第三个数据库配置一 -->
	<bean id="zw2"
		class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.driverUrlzw2}" /> 
		<property name="username" value="${proxool.userzw2}"></property>
        <property name="password" value="${proxool.passwordzw2}" />
        <property name="filters"  value="${db.filters}"></property>
        <property name="maxActive" value="${db.pool.maxActive}"></property>
        <property name="initialSize" value="${db.pool.initialSize}"></property>
        <property name="minIdle" value="${db.pool.minIdle}"></property>
        <property name="maxWait" value="${db.maxWait}"></property>    
        <property name="timeBetweenEvictionRunsMillis" value="${db.timeBetweenEvictionRunsMillis}"></property>
        <property name="minEvictableIdleTimeMillis" value="${db.minEvictableIdleTimeMillis}"></property>
        <property name="validationQuery" value="${db.validationQuery}"></property>
        <property name="testWhileIdle" value="${db.testWhileIdle}"></property>
        <property name="testOnBorrow" value="${db.testOnBorrow}"></property>
        <property name="testOnReturn" value="${db.testOnReturn}"></property>
        <property name="poolPreparedStatements" value="${db.poolPreparedStatements}"></property>
        <property name="maxOpenPreparedStatements" value="${db.maxOpenPreparedStatements}"></property>
	</bean>

	<bean id="dynamicDataSource"
		class="main.spring.database.multDataSource.DynamicDataSource">
		<!-- 通过key-value的形式来关联数据源 -->
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry value-ref="zw6" key="zw6"></entry>
				<entry value-ref="zw3" key="zw3"></entry>
				<entry value-ref="zw2" key="zw2"></entry>
			</map>
		</property>
		<!-- 设置默认的数据库 -->
		<property name="defaultTargetDataSource" ref="zw3" />
	</bean>

	<!-- 使用注解的方式来完成JDBC的注入   MVC -->
	<context:component-scan base-package="main"></context:component-scan>
	<context:component-scan base-package="test"></context:component-scan>
	<!--<mvc:annotation-driven/>  mvc的Jar没有导进来 -->
	
	<!-- 应该配置两个事物管理 -->
	<!-- 配置事务 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource">
			<ref bean="dynamicDataSource" />
		</property>
	</bean>
	
	<!-- 编程式事务管理 -->
	<bean id="transactionTemplate"
		class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager">
			<ref bean="transactionManager" />
		</property>
	</bean>
	
	<!-- 第二数据库配置2 -->
	<bean id="DBHelper" class="main.helper.database.DBHelper">
		<property name="dataSource" ref="dynamicDataSource" />
		<property name="transactionTemplate">
			<ref bean="transactionTemplate" />
		</property>
	</bean>
	
	<!-- 使用AOP请注意,bean会全部变成动态代理对象,如果bean有初始化操作将会无效 -->
	<!-- 开启AOP的注解 -->
	<aop:aspectj-autoproxy/>
	<!-- com.njry.clj.util.workUtils.project.procedure.entity.procedureDetail.Procedure -->
	<aop:config>
		<!-- 没有写dao和实现层,所以这里分成的两个切面(操作数据库的代码没有统一起来) 
				<aop:pointcut id="datebasePointCut1" expression="execution(* com.njry.clj.util.excel..*.*(..))" />
		<aop:pointcut id="datebasePointCut3" expression="execution(* com.njry.clj.helper.export..*.*(..))" 
		<aop:advisor advice-ref="dataSourceAspect" pointcut-ref="datebasePointCut1" order="1"/>/>
		<aop:advisor advice-ref="dataSourceAspect" pointcut-ref="datebasePointCut3" order="1"/>
		-->
		<aop:pointcut id="datebasePointCut1" expression="execution(* main.old..*.*(..))" />
		<aop:pointcut id="datebasePointCut2" expression="execution(* main.app.njry..*.*(..)) and !execution(* main.app.njry.procedure.detailtable..*(..))" />
		<aop:advisor advice-ref="dataSourceAspect" pointcut-ref="datebasePointCut1" order="1"/>
		<aop:advisor advice-ref="dataSourceAspect" pointcut-ref="datebasePointCut2" order="1"/>
	</aop:config>
</beans>